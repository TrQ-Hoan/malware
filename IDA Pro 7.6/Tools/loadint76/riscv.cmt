RISCV_null:    "Unknown Operation"
  // Set 32 bits
  // I(nteger) extension
RISCV_lui:     "Load Upper Immediate"
RISCV_auipc:   "Add Upper Immediate to pc"
RISCV_jal:     "Jump and link"
RISCV_jalr:    "Jump register rs1 & write pc +2 in rs1"
RISCV_beq:     "Branch on equal"
RISCV_bne:     "Branch not equal"
RISCV_blt:     "Branch less than"
RISCV_bge:     "Branch greater or equal"
RISCV_bltu:    "Branch less than unsigned"
RISCV_bgeu:    "Branch greater or equal unsigned"
RISCV_lb:      "Load byte"
RISCV_lh:      "Load halfword"
RISCV_lw:      "Load word"
RISCV_lbu:     "Load byte unsigned"
RISCV_lhu:     "Load halfword unsigned"
RISCV_sb:      "Store byte"
RISCV_sh:      "Store halfword"
RISCV_sw:      "Store word"
RISCV_addi:    "Add immediate"
RISCV_slti:    "Set less than immediate"
RISCV_sltiu:   "Set less than immediate unsigned"
RISCV_xori:    "Xor immediate"
RISCV_ori:     "Or immediate"
RISCV_andi:    "And Immediate"
RISCV_slli:    "Shift left logical immediate"
RISCV_srli:    "Shift right logical immediate"
RISCV_srai:    "Shift right arithmetical immediate"
RISCV_add:     "Add integer"
RISCV_sub:     "Substract integer"
RISCV_sll:     "Shift left logical"
RISCV_slt:     "Set Less Than"
RISCV_sltu:    "Set Less Than unsigned"
RISCV_xor:     "eXclusive Or"
RISCV_srl:     "Shift right logical"
RISCV_sra:     "Shift right arithmetical"
RISCV_or:      "Or"
RISCV_and:     "And"
RISCV_fence:   "Fence"
RISCV_ecall:   "Ecall"
RISCV_ebreak:  "Ebreak"
RISCV_uret:    "User lvl return"
RISCV_sret:    "Supervisor lvl return"
RISCV_mret:    "Machine lvl return"
RISCV_wfi:     "Wait for interrupt"
RISCV_sfence:  "Supervisor fence"
RISCV_hfenceb: "Hypervisor fence b"
RISCV_hfenceg: "Hypervisor fence g"
  // Set 64 bits
  // Integer extension
RISCV_lwu:     "Load word unsigned"
RISCV_ld:      "Load double"
RISCV_sd:      "Store double"
RISCV_addiw:   "Add immediate word"
RISCV_slliw:   "Shift left logical immediate word"
RISCV_srliw:   "Shift right logical immediate word"
RISCV_sraiw:   "Shift right arithmetical immediate word"
RISCV_addw:    "Add integer word"
RISCV_subw:    "Substract integer word"
RISCV_sllw:    "Shift left logical word"
RISCV_sltw:    "Set Less Than word"
RISCV_srlw:    "Shift right logical word"
RISCV_sraw:    "Shift right arithmetical word"
  // Zifencei Standard extension
RISCV_fencei:  "Fence immediate"
  // Zicsr Standard extension
RISCV_csrrw:   "Atomic Read Write CSR"
RISCV_csrrs:   "Atomic Read and Set bit CSR"
RISCV_csrrc:   "Atomic Read and clear bit CSR"
RISCV_csrrwi:  "Atomic Read Write CSR immediate"
RISCV_csrrsi:  "Atomic Read and Set bit CSR immediate"
RISCV_csrrci:  "Atomic Read and clear bit CSR immediate"
  // M(ultiplication and divison for integer) extension
RISCV_mul:     "Multiplication"
RISCV_mulh:    "Multiplication half (signed signed)"
RISCV_mulhsu:  "Multiplication half (signed unsigned)"
RISCV_mulhu:   "Multiplication half (unsigned unsigned)"
RISCV_div:     "Division"
RISCV_divu:    "Division unsigned"
RISCV_rem:     "Remainder of div"
RISCV_remu:    "Remainder of div unsigned"
  // 64b M(ultiplication and divison for integer) extension
RISCV_mulw:    "Multiplication word"
RISCV_divw:    "Division word"
RISCV_divuw:   "Division unsigned word"
RISCV_remw:    "Remainder of div word"
RISCV_remuw:   "Remainder of div unsigned word"
  // A(tomic) operation standtard extension
RISCV_lr:      "Load reserved"
RISCV_sc:      "Store conditional"
RISCV_amoswap: "Atomic memory operation swap"
RISCV_amoadd:  "Atomic memory operation add"
RISCV_amoxor:  "Atomic memory operation xop"
RISCV_amoand:  "Atomic memory operation and"
RISCV_amoor:   "Atomic memory operation or"
RISCV_amomin:  "Atomic memory operation min"
RISCV_amomax:  "Atomic memory operation max"
RISCV_amominu: "Atomic memory operation min unsigned"
RISCV_amomaxu: "Atomic memory operation max unsigned"
  // simple precision F(loat) instruction extension
RISCV_flw:     "Load word (32b)"
RISCV_fsw:     "Store word (32b)"
RISCV_fmadd:   "Multiply then add"
RISCV_fmsub:   "Multiply then substract"
RISCV_fnmsub:  "Multiply then negate then substract"
RISCV_fnmadd:  "Multiply then negate then add"
RISCV_fadd:    "Float addition"
RISCV_fsub:    "Float substraction"
RISCV_fmul:    "Float multiplication"
RISCV_fdiv:    "Float division"
RISCV_fsqrt:   "Float square root"
RISCV_fsgnj:   "Float sign injection"
RISCV_fsgnjn:  "Float sign injection negate"
RISCV_fsgnjx:  "Float sign injection xor between operands"
RISCV_fmin:    "Float minimum"
RISCV_fmax:    "Float maximum"
RISCV_fcvtf2f: "F2F conversion"
RISCV_fcvtf2i: "F2I conversion"
RISCV_fcvti2f: "I2F conversion"
RISCV_fmv:     "Mv"
RISCV_feq:     "Float equal"
RISCV_flt:     "Float less than"
RISCV_fle:     "Float less or equal than"
RISCV_fclass:  "Classify the float"
  // 64b simple precision F(loat) instruction extension
  // D(ouble) precision float instruction extension
RISCV_fld:     "Load double (64b)"
RISCV_fsd:     "Store double (64b)"
  // 64b D(ouble) precision float instruction
  // Q(uadruple) precision float instruction extension
RISCV_flq:     "Load quadruple (128b)"
RISCV_fsq:     "Store quadruple (128b)"
  // 64b Q(uadruple) precision float extension
  // pseudo insn
RISCV_nop:        "No operation"
RISCV_li:         "Load Immediate"
RISCV_mv:         "Copy register"
RISCV_not:        "One's complement"
RISCV_neg:        "Two's complement"
RISCV_negw:       "Two's complement word"
RISCV_sext:       "Sign extend word"
RISCV_seqz:       "Set if = zero"
RISCV_snez:       "Set if != zero"
RISCV_sltz:       "Set if < zero"
RISCV_sgtz:       "Set if > zero"
RISCV_fabs:       "Float absolute value"
RISCV_fneg:       "Float negate"
RISCV_beqz:       "Branch == 0"
RISCV_bnez:       "Branch != 0"
RISCV_blez:       "Branch <= 0"
RISCV_bgez:       "Branch >= 0"
RISCV_bltz:       "Branch < 0"
RISCV_bgtz:       "Branch > 0"
RISCV_j:          "Jump"
RISCV_jr:         "Jump register"
RISCV_ret:        "Return"
RISCV_rdinstret:  "Read instructions-retired counter"
RISCV_rdcycle:    "Read cycle counter"
RISCV_rdtime:     "Read real-time clock"
RISCV_rdinstreth: "Read instructions-retired counter Upper 32 bits"
RISCV_rdcycleh:   "Read cycle counter Upper 32 bits"
RISCV_rdtimeh:    "Read real-time clock Upper 32 bits"
RISCV_csrr:       "Read CSR"
RISCV_csrw:       "Write CSR"
RISCV_csrs:       "Set bit CSR"
RISCV_csrc:       "Clear bit"
RISCV_csrwi:      "Write CSR immediate"
RISCV_csrsi:      "Set bit CSR immediate"
RISCV_csrci:      "Clear bit CSR immediate"
RISCV_frcsr:      "Read FP control/status register"
RISCV_fscsr:      "Write/Swap FP control/status register"
RISCV_frrm:       "Read FP rounding mode"
RISCV_fsrm:       "Write/Swap FP rounding mode"
RISCV_frflags:    "Read FP exception flags"
RISCV_fsflags:    "Write/Swap FP exception flags"
  // Macro
RISCV_la:         "Load Address macro"
RISCV_call:       "Call macro"
RISCV_tail:       "Tail macro"
RISCV_jump:       "Jump macro"
